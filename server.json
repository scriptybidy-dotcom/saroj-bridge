// server.js
import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

// Read secrets from env
const OPENAI_API_KEY = process.env.OPENAI_API_KEY; // set this on Render
const BRIDGE_SECRET = process.env.BRIDGE_SECRET;   // set this on Render

if (!OPENAI_API_KEY) {
  console.error("Missing OPENAI_API_KEY env var");
  process.exit(1);
}

app.post("/chat", async (req, res) => {
  try {
    const { message, secret } = req.body || {};
    if (!message) return res.status(400).json({ error: "No message" });
    if (!secret || secret !== BRIDGE_SECRET) return res.status(403).json({ error: "Forbidden" });

    // Call OpenAI Chat Completion
    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: "You are a helpful assistant named SAROJ." },
          { role: "user", content: message }
        ],
        max_tokens: 300
      })
    });

    const data = await openaiRes.json();
    const reply = data?.choices?.[0]?.message?.content || "Sorry, I couldn't produce a reply.";
    return res.json({ reply });
  } catch (err) {
    console.error("Server error:", err);
    return res.status(500).json({ reply: "Server error connecting to OpenAI." });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`SAROJ bridge listening on port ${PORT}`));
